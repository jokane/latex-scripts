#!/usr/bin/perl -w

# Compile LaTeX to DVI.
# This script has several advantages over the other options I've looked at:
#
# 1. It decides how many times to run LaTeX based on watching for changes in
# the log file.  For most documents (that is, those for which LaTeX's output is
# deterministic) this method should be very simple and reliable.
#
# 2. It uses batchmode parameters for LaTeX, to avoid the useless interactive
# prompts when errors occur.
#
# 3. It filters the LOG file looking for errors and warnings, so that the
# standard output generated by this script should be only messages that are
# useful for the user.
#
# 4. If the compilation fails, it removes the useless incomplete DVI.  This
# helps makefiles to work better.
#
# Revision history:
#    7/11/2011 - Initial release
#    8/05/2011 - Increased context lines on errors to 4, to ensure that line
#                number of errors is visible.
#   10/12/2011 - Added check for "Runaway argument?" warnings.
#   11/01/2011 - Added printouts of each command we execute, to blend better
#                when we're part of a makefile.
#    5/15/2013 - Added support for makeindex.
#    6/17/2013 - Don't count warnings toward the maximum printed lines.  This
#                avoids the problem where important errors count not be seen in
#                documents with lots of warnings.
#    7/10/2013 - Added "after-latex" option, to specify a command that should be
#                executed after the first pass of LaTeX.
#    8/09/2013 - Added "makeindex-options" options, to pass things through to
#                makeindex.  Useful for style files.
#    8/10/2013 - Added "after-makeindex" and "before-makeindex".
#    8/28/2013 - Added "before-latex".  (via Nick Stiffler)

use strict;
use Getopt::Long;

use vars qw( $bibTeX );

sub annotateLog {
  my @chars = split(//, shift);

  my @fileStack = ("TeX");
  my $currentFile = "TeX";
  my $answer = $fileStack[-1] . ":";
  my $partialName = "";
  my $state = 0;
  # 0 --> normal
  # 1 --> reading a file name

  foreach my $char (@chars) {

    if($state == 1) {
      if($char =~ /[\s()]/) {
        if(-e $partialName) {
          $partialName =~ s/.*\///;
          push @fileStack, $partialName;
        } else {
          push @fileStack, $fileStack[-1];
        }
        $partialName = "";
        $state = 0;
      } else {
        $partialName .= $char;
      }
    }

    if($char eq '(') {
      $state = 1;
    }

    if($char eq ')') {
      pop @fileStack;
    }

    $answer .= $char;

    if(ord($char) == 10) {
      $answer .= $fileStack[-1] . ":";
    }
  }

  return $answer;
}



sub getFile {
# Reads in a file and returns its contents.
# Complains if the file cannot be opened.
  my ($fname) = shift;
  my ($line, $file);
  if(!open(IN,"<$fname")) {
    print "warning: cannot open $fname; not scanning\n";
    return "";
  }

  $file = "";
  while($line = <IN>) {
    $file .= $line;
  }
  return $file;
}

sub runLaTeX {
  my $root = shift;
  my $cmd = "latex --interaction batchmode $root > /dev/null";
  print "$cmd\n";
  system($cmd);
}

sub go {
  my $beforeLaTeXCommand;
  my $afterLaTeXCommand;
  my $beforeMakeIndexCommand;
  my $afterMakeIndexCommand;
  my $makeIndexOptions = "";
  if(!GetOptions(
    'bibtex' => \$bibTeX,
    'before-latex=s' => \$beforeLaTeXCommand,
    'after-latex=s' => \$afterLaTeXCommand,
    'before-makeindex=s' => \$beforeMakeIndexCommand,
    'after-makeindex=s' => \$afterMakeIndexCommand,
    'makeindex-options=s' => \$makeIndexOptions
  )) {
    exit(1);
  }

  if(!defined $ARGV[0]) {
    print STDERR "Usage: $0 <latex source file>\n";
  }

  # If we got any other commands to run before the first LaTeX, run them.
  if(defined $beforeLaTeXCommand) {
    print "$beforeLaTeXCommand\n";
    system($beforeLaTeXCommand);
  }

  # Get the root filename.
  my $root = $ARGV[0];
  $root =~ s/\.tex$//;

  # Keep count of how many times we've run LaTeX.
  my $k = 0;
  my $maxTries = 10;

  # Get a log file to start with.  LaTeX once if necessary.
  if(!-e "$root.log") {
    runLaTeX($root);
    $k++;
  }
  my $lastLog = getFile("$root.log");

  # Keep running LaTeX until the log file stops changing.
  my $log = "";
  my $bibOK = 0;
  my $idxOK = 0;
  while($k < $maxTries && $log ne $lastLog) {
    runLaTeX($root);
    $k++;

    if(!$bibOK) {
      # Look to see if there are any citations in the AUX file.  If so,
      # run BibTeX to handle them.
      my $aux = getFile("$root.aux");
      if($aux =~ "citation") {
        my $cmd = "bibtex -terse $root";
        print "$cmd\n";
        system($cmd);
      }
      $bibOK = 1;
    }

    # If the document contains an index, run makeindex to keep it up-to-date.
    if(!$idxOK && -e "$root.idx") {
      if(defined $beforeMakeIndexCommand) {
        print "$beforeMakeIndexCommand\n";
        system($beforeMakeIndexCommand);
        undef $beforeMakeIndexCommand;
      }
      my $cmd = "makeindex -q $root $makeIndexOptions";
      print "$cmd\n";
      system($cmd);
      $idxOK = 1;
      if(defined $afterMakeIndexCommand) {
        print "$afterMakeIndexCommand\n";
        system($afterMakeIndexCommand);
        undef $afterMakeIndexCommand;
      }
    }

    # If we got any other commands to run after the first LaTeX, run them.
    if(defined $afterLaTeXCommand) {
      print "$afterLaTeXCommand\n";
      system($afterLaTeXCommand);
      undef $afterLaTeXCommand;
    }

    $lastLog = $log;
    $log = getFile("$root.log");
  }

  # Show the relevant parts of the output.  At the same time, figure
  # out if LaTeX was successful.
  my $printNext = 0;
  my $retCode = 0;
  my $printMax = 10;
  my $numPrinted = 0;
  my $maxWarned = 0;

  # Modify the log text so that we can see which files are generating which
  # messages.
  $log = annotateLog($log);

  # Process the log file line-by-line, to decide what to show.
  foreach my $line (split(/\n/, $log)) {
    $line .= "\n";

    if($line =~ /Warning/ && $line !~ /lcg/) {
      $printNext = 1;
    }

    if($line =~ /Error/) {
      $printNext = 1;
      $numPrinted++;
      $retCode = 1;
    }

    if($line =~ /Runaway/) {
      $printNext = 4;
      $numPrinted++;
      $retCode = 1;
    }

    if($line =~ /^!/) {
      $printNext = 4;
      $numPrinted++;
      $retCode = 1;
    }

    if($printNext > 0) {
      if($numPrinted < $printMax) {
        print $line;
      }

      if($numPrinted >= $printMax && !$maxWarned) {
        $maxWarned = 1;
        print "latex2dvi: Hiding additional messages.\n";
      }
      $printNext--;
    }

  }


  # Let the user know if we just gave up.
  if($k >= $maxTries) {
    print STDERR "$0: Ran LaTeX $k times, but $root.log was different each time.\n";
    print STDERR "$0: Giving up.\n";
    exit(1);
  }

  # Remove the DVI if an error occured.
  if($retCode == 1) {
    unlink "$root.dvi";
  }

  # Done!
  exit($retCode);
}


go;

